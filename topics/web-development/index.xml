<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Development on Cse Tutorials</title><link>https://csetutorials.com/topics/web-development/</link><description>Recent content in Web Development on Cse Tutorials</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 26 Sep 2024 15:38:21 +0530</lastBuildDate><atom:link href="https://csetutorials.com/topics/web-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Multithreading and Asyncio in Python: A Deep Dive into I/O-bound Task Management</title><link>https://csetutorials.com/multithreading-vs-asyncio-python-io-bound-tasks.html</link><pubDate>Thu, 26 Sep 2024 15:38:21 +0530</pubDate><guid>https://csetutorials.com/multithreading-vs-asyncio-python-io-bound-tasks.html</guid><description>&lt;p>When building applications in Python, particularly those that handle numerous &lt;strong>I/O-bound tasks&lt;/strong> (e.g., file reading/writing, network requests), choosing the right concurrency model - &lt;strong>multithreading&lt;/strong> or &lt;strong>asyncio&lt;/strong> is crucial for performance. Both approaches aim to optimize how tasks are executed concurrently, but they differ in how they handle context switching, resource management, and complexity. In this article, we’ll explore the nuances, concerns, and trade-offs of &lt;strong>multithreading&lt;/strong> and &lt;strong>asyncio&lt;/strong> in Python, especially when dealing with I/O-bound tasks.&lt;/p></description></item><item><title>On Page SEO while writing a Blog</title><link>https://csetutorials.com/on-page-seo-while-writing-blog.html</link><pubDate>Thu, 20 Apr 2023 09:31:08 +0530</pubDate><guid>https://csetutorials.com/on-page-seo-while-writing-blog.html</guid><description>&lt;h2 id="keyword">Keyword&lt;/h2>
&lt;ul>
&lt;li>Use in &lt;strong>Starting and Ending Para&lt;/strong> of Content&lt;/li>
&lt;li>Place your main keyword within the first 100 words.&lt;/li>
&lt;li>Use in &lt;strong>Image Name, Alt Tag&lt;/strong> and &lt;strong>Title Tag&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Title&lt;/strong> Of Our Posts&lt;/li>
&lt;li>&lt;strong>Permalink&lt;/strong> of Posts&lt;/li>
&lt;li>Keywords in &lt;strong>Heading Tags h1, h2…&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Bold&lt;/strong> and &lt;em>Italics&lt;/em> your keyword and other important Semantics keyword.&lt;/li>
&lt;li>Use it in &lt;strong>Meta Description&lt;/strong>.&lt;/li>
&lt;li>Use &lt;strong>long tail keywords&lt;/strong> in place of generic keywords.&lt;/li>
&lt;li>Instead of keyword, use &lt;strong>keyword phrases&lt;/strong>. Ex:- a single word (i.e. &amp;ldquo;dating&amp;rdquo;) is a keyword, but a phrase (i.e. &amp;ldquo;dating tips&amp;rdquo;) is a keyword phrase.&lt;/li>
&lt;li>Place Important Keywords Close to the Front of the Title Tag&lt;/li>
&lt;li>Post Categories :- Named them correctly and put your really targeted words there.&lt;/li>
&lt;li>Post Comments :- Whenever you reply your reader’s comment on your blog, try to add some keyword phrases in your reply in a natural way that looks obvious while reading.&lt;/li>
&lt;li>&lt;strong>Use LSI&lt;/strong> :- LSI is an indexing and retrieval method that uses a mathematical technique called singular value decomposition (SVD) to identify patterns in the relationships between the terms and concepts contained in an unstructured collection of text. For example, if we’re trying to rank for &amp;ldquo;common mistakes using keywords in your blog,&amp;rdquo; we can also say things like &amp;ldquo;common mistakes using keywords in blogs&amp;rdquo; and &amp;ldquo;common mistakes people make using keywords in blogs. Write like a human, not a spammy robot.&lt;/li>
&lt;li>Use &lt;strong>keyword variations&lt;/strong> (ex. search engine optimisation, seo, search engine ranking)&lt;/li>
&lt;li>Write &lt;strong>more blog posts&lt;/strong> about the super competitive keywords.&lt;/li>
&lt;/ul>
&lt;h2 id="title">Title&lt;/h2>
&lt;ul>
&lt;li>Make it &lt;strong>attractive&lt;/strong> and &lt;strong>catchy&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Include narrower and more targeted keywords&lt;/strong> than broad keywords. &lt;strong>For example:&lt;/strong> If you have an article about &amp;ldquo;best plagiarism checker tools&amp;rdquo; go for &amp;ldquo;best plagiarism checker tools&amp;rdquo; rather than a broad &amp;ldquo;plagiarism checker&amp;rdquo; only.&lt;/li>
&lt;li>Use Multiple Keywords in Title (Ex. Role of Social Media in SEO &amp;amp; Importance)&lt;/li>
&lt;li>Try using &lt;strong>actionable and psychological keywords&lt;/strong> on your blog post title. You can significantly boost your ranking using keywords like &amp;ldquo;updated&amp;rdquo;, &amp;ldquo;step by step guide&amp;rdquo; etc. Though these words themselves have nothing to do with SERPs but they will increase your click through rate which is also a ranking factor.&lt;/li>
&lt;li>Place Important Keywords Close to the Front of the Title Tag&lt;/li>
&lt;li>&lt;strong>Show different post titles to readers and search engines&lt;/strong>. ex :- User friendly title - &amp;ldquo;Make money online with infolinks&amp;rdquo;, search engine friendly title - &amp;ldquo;infolink in text advertising program review&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;h2 id="meta-description">Meta Description&lt;/h2>
&lt;ul>
&lt;li>Write a Good Meta Description with Keywords&lt;/li>
&lt;li>Add Unique meta description to make your post search engine friendly.&lt;/li>
&lt;/ul>
&lt;h2 id="title-tag">Title Tag&lt;/h2>
&lt;ul>
&lt;li>Keep your title tags within &lt;strong>59 characters&lt;/strong>.&lt;/li>
&lt;li>Use brand name at the end of a title tag.&lt;/li>
&lt;/ul>
&lt;h2 id="url">URL&lt;/h2>
&lt;ul>
&lt;li>Should be of 100 characters of length&lt;/li>
&lt;li>Words separated by &lt;strong>hyphens or dashes&lt;/strong>&lt;/li>
&lt;li>Keep your permalink free from &lt;strong>stop words&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;ul>
&lt;li>Write in Short Paragraphs :- Write your blog posts in short paragraphs (&lt;strong>no more than 2-3 sentences&lt;/strong> is a safe rule) to provide visual relief from a text heavy web page.&lt;/li>
&lt;li>Insert an image between paragraphs.&lt;/li>
&lt;/ul>
&lt;h2 id="blog-post">Blog Post&lt;/h2>
&lt;ul>
&lt;li>Don’t just list links. Instead, give readers a reason to stay on your blog by providing links with your own synopsis and point of view about the content of those links. Remember, a link without context is a simple way to lose readers rather than retain them.&lt;/li>
&lt;li>Make blog post &lt;strong>scannable&lt;/strong>.&lt;/li>
&lt;li>Ask Question in between the post or at the end of the post&lt;/li>
&lt;/ul>
&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>Link Internally&lt;/li>
&lt;li>Consider Link Placement :- Internal links should be used in the first third of your post with external links used later&lt;/li>
&lt;li>Keyword Linking :- Avoid linking the same keyword or keyword phrase to multiple URLs. Similarly, avoid linking variations of the same keyword phrase to the same URL.&lt;/li>
&lt;li>Limit the Number of Links :- one link per 125 words.&lt;/li>
&lt;li>LSI can be used in anchor text while interlinking to a particular post.&lt;/li>
&lt;/ul>
&lt;h2 id="images">Images&lt;/h2>
&lt;ul>
&lt;li>Name image files used in your blog posts with useful titles that explain what the images are.&lt;/li>
&lt;li>If you can include keywords in image file names naturally, do so.&lt;/li>
&lt;li>Add text for the image Alt-Tag and description.&lt;/li>
&lt;li>Use &lt;strong>iframe&lt;/strong> tag for displaying images from another site. I this way the search engines recognize an iframe or a frame used to pull in another site’s content for what it is, and therefore ignore the content inside the iframe or frame as it is content published by another publisher.In other words, they don’t consider content pulled in from another site as part of the unique content of your web page.&lt;/li>
&lt;/ul>
&lt;h2 id="high-quality-content">High Quality Content&lt;/h2>
&lt;ul>
&lt;li>Are you able to offer research that is relevant or can you provide practical advice?&lt;/li>
&lt;li>Have you made any necessary corrections with regard to your facts, grammar and spelling?&lt;/li>
&lt;li>Would a machine or a reader be interested in the topic?&lt;/li>
&lt;li>Has the article been edited well?&lt;/li>
&lt;li>Is your website authoritative?&lt;/li>
&lt;li>Would you save your article for later reference?&lt;/li>
&lt;li>Are there too many promotions, advertisements or calls-to-action in the article that serve as distractions?&lt;/li>
&lt;li>Would a reputable journal or magazine be interested in printing your article?&lt;/li>
&lt;li>Is your article brief, ineffective and pointless?&lt;/li>
&lt;li>Know your visitors&lt;/li>
&lt;li>Write in simple words&lt;/li>
&lt;li>Personal touch&lt;/li>
&lt;li>Your views&lt;/li>
&lt;/ul></description></item><item><title>How to load Vue Components directly to html js</title><link>https://csetutorials.com/load-vue-files-directly-html-js.html</link><pubDate>Wed, 04 Mar 2020 08:37:40 +0530</pubDate><guid>https://csetutorials.com/load-vue-files-directly-html-js.html</guid><description>&lt;p>In this tutorial I am going to show you how you could load .vue files or components directly to html/js unlike full fledged vuejs project in which you have to compile project every time.&lt;/p>
&lt;p>If some of you know Angular 1.x versions, then you know that how it was easy to add the modules, in which you have to add js files to index.html and after hitting F5 you could see changes. It was also very easy to integrate the front end code with backend.&lt;/p></description></item><item><title>Jersey Server Side Events Tutorial</title><link>https://csetutorials.com/jersey-sse-tutorial.html</link><pubDate>Fri, 20 Dec 2019 08:43:01 +0530</pubDate><guid>https://csetutorials.com/jersey-sse-tutorial.html</guid><description>&lt;p>In this article I&amp;rsquo;m going to explain what is SSE (Server Side Events) and after that will show you an example.&lt;/p>
&lt;h2 id="what-is-sse">What is SSE?&lt;/h2>
&lt;p>In general scenario when we want to send something to the client, then client creates a requests to the server. After that the server fetches necessary information / data and sends to the client and then connection is closed. Suppose what if the time to fetch the data is very long.&lt;/p></description></item><item><title>How to run threadsafe code in PHP</title><link>https://csetutorials.com/threadsafe-code-in-php.html</link><pubDate>Fri, 10 May 2019 09:09:18 +0530</pubDate><guid>https://csetutorials.com/threadsafe-code-in-php.html</guid><description>&lt;p>Suppose you have a php file in which there is a code block which you want thread safe. It means, if that php file is being called from many places simultaneously and you want the code block to be executed one by one irrespective of being called at the same time by different places. So here is the theory :&lt;/p>
&lt;ol>
&lt;li>Create a temporary directory if not exits.&lt;/li>
&lt;li>Check whether temporary directory is empty or not. If not empty then repeat this step ( step 2) after some time, lets say 50 milliseconds. If empty then go to step 3&lt;/li>
&lt;li>Fetch current timestamp in milliseconds (milliseconds since 1 Jan 1970). Create a directory with that timestamp inside the temporary directory. In this way that temp directory will contain directories whose filename is a number.&lt;/li>
&lt;li>Now check all the files inside that temporary directory and check whether our timestamp is the lowest number among all file name. If it is the lowest timestamp then you have acquired the lock and go to step 5, if not it means somebody already acquired the lock and therefore sleep for 50 milliseconds and then go to step 2.&lt;/li>
&lt;li>Write down your thread safe code.&lt;/li>
&lt;li>Now to release the lock, delete that temporary directory and all it sub directories recursively.&lt;/li>
&lt;li>Thats it. Here is a sample program&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$lockPath &lt;span style="color:#f92672">=&lt;/span>	&lt;span style="color:#e6db74">&amp;#39;tempDir/lock/&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">file_exists&lt;/span>($lockPath)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">mkdir&lt;/span>($lockPath, &lt;span style="color:#ae81ff">0777&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 $lock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getLock&lt;/span>($lockPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">if&lt;/span> ($lock &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#a6e22e">sleep&lt;/span>(&lt;span style="color:#a6e22e">mt_rand&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Your thread safe code goes here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// releasing the lock
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">file_exists&lt;/span>($lockPath)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 $handle &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">opendir&lt;/span>($lockPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> ($entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">readdir&lt;/span>($handle))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">if&lt;/span> ($entry &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> $entry &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;..&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">rrmdir&lt;/span>($lockPath &lt;span style="color:#f92672">.&lt;/span> $entry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#a6e22e">closedir&lt;/span>($handle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">rrmdir&lt;/span>($dir) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">is_dir&lt;/span>($dir)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		$objects &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">scandir&lt;/span>($dir);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">foreach&lt;/span> ($objects &lt;span style="color:#66d9ef">as&lt;/span> $object) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		 &lt;span style="color:#66d9ef">if&lt;/span> ($object &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> $object &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;..&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">is_dir&lt;/span>($dir&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>$object))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				 &lt;span style="color:#a6e22e">rrmdir&lt;/span>($dir&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>$object);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				 &lt;span style="color:#a6e22e">unlink&lt;/span>($dir&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>$object);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">rmdir&lt;/span>($dir);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getLock&lt;/span>($lockPath) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">is_dir_empty&lt;/span>($lockPath) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		$milliseconds &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">round&lt;/span>(&lt;span style="color:#a6e22e">microtime&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">mkdir&lt;/span>($lockPath&lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>$milliseconds, &lt;span style="color:#ae81ff">0777&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">isLowestTimestamp&lt;/span>($lockPath, $milliseconds);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">isLowestTimestamp&lt;/span>($path, $milliseconds) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 $dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">opendir&lt;/span>($path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> ($file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">readdir&lt;/span>($dir))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span>(($file &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ($file &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;..&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				 &lt;span style="color:#66d9ef">if&lt;/span> ((&lt;span style="color:#a6e22e">int&lt;/span>)$file &lt;span style="color:#f92672">&amp;lt;&lt;/span> $milliseconds) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				 &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">is_dir_empty&lt;/span>($dir) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 $handle &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">opendir&lt;/span>($dir);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> ($entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">readdir&lt;/span>($handle))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">if&lt;/span> ($entry &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> $entry &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;..&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">closedir&lt;/span>($handle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#a6e22e">closedir&lt;/span>($handle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Redirect Non www to www using UrlRewriteFilter in Web Servers</title><link>https://csetutorials.com/redirect-non-www-using-urlrewritefilter-web-servers.html</link><pubDate>Thu, 13 Oct 2016 09:37:22 +0530</pubDate><guid>https://csetutorials.com/redirect-non-www-using-urlrewritefilter-web-servers.html</guid><description>&lt;p>On apache servers usually we redirect by modifying .htaccess file. But it doesn&amp;rsquo;t work on web apps that are hosted on servers like tomcat, jboss etc. So in this case we&amp;rsquo;ll use a Java Web Filter called &lt;a href="http://tuckey.org/urlrewrite/">UrlRewriteFilter&lt;/a>. It allows us to change url before they hit the apis. It is compatible with all web servers (Apache Tomcat, JBoss, Jetty etc.). Its licence is BSD-3-Clause&lt;/p>
&lt;p>If you want the latest jar then you can take the latest pull from its &lt;a href="https://github.com/paultuckey/urlrewritefilter">github repository&lt;/a> and compile it using command &lt;code>mvn clean install&lt;/code>.&lt;/p></description></item><item><title>How to obfuscate jar or war file using yguard</title><link>https://csetutorials.com/obfuscate-jar-or-war-file-using-yguard.html</link><pubDate>Tue, 20 Sep 2016 08:15:24 +0530</pubDate><guid>https://csetutorials.com/obfuscate-jar-or-war-file-using-yguard.html</guid><description>&lt;p>YGuard is a free Java bytecode obfuscator and shrinker. It is one of the best code obfuscation tools. It improves your software deployment by prohibiting undesirable access to your source code. It is free and protect code from reverse engineering. It can obfuscate Names and shrinks Code.&lt;/p>
&lt;p>YGuard is an Ant Task. It means it can be run through ant. If you are using maven then you would need a plugin called &lt;code>maven-antrun-plugin&lt;/code>. You can call ant script from pom.xml using this plugin. Here the code for calling ant script using maven.&lt;/p></description></item><item><title>Deploy Angular Maven WebApp on Tomcat</title><link>https://csetutorials.com/deploy-angular-2-maven-webapp-on-tomcat.html</link><pubDate>Mon, 08 Aug 2016 07:16:16 +0530</pubDate><guid>https://csetutorials.com/deploy-angular-2-maven-webapp-on-tomcat.html</guid><description>&lt;p>In this post I&amp;rsquo;m going to show you how you could integrate Angular with Maven automatically. I request you to read this article carefully and not for just copy paste because it would be very helpful for you in various ways like debugging, tweaking or modifying steps etc.&lt;/p>
&lt;h2 id="first-of-all-here-is-the-summary-of-the-steps-for-integration">First of all here is the summary of the steps for integration&lt;/h2>
&lt;ol>
&lt;li>Setup nodejs and npm&lt;/li>
&lt;li>Run command &lt;code>npm install&lt;/code> in angular directory to install dependencies and compile typescript files.&lt;/li>
&lt;li>Run command &lt;code>npm run build&lt;/code> in angular directory to build Angular project.&lt;/li>
&lt;li>Finally copied the contents from &lt;code>your-angular-directory/dist/&lt;/code> in root of .war file (before finally making .war file).&lt;/li>
&lt;/ol>
&lt;h2 id="explaination">Explaination&lt;/h2>
&lt;p>We are going to do all these steps automatically means we want maven to do all these steps above for us.&lt;/p></description></item></channel></rss>