<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Big Data on Cse Tutorials</title><link>https://csetutorials.com/topics/big-data/</link><description>Recent content in Big Data on Cse Tutorials</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 15 Jul 2025 10:00:00 +0530</lastBuildDate><atom:link href="https://csetutorials.com/topics/big-data/index.xml" rel="self" type="application/rss+xml"/><item><title>Apache Spark: Core Concepts and Execution Flow</title><link>https://csetutorials.com/spark-core-concepts-and-execution-flow.html.html</link><pubDate>Tue, 15 Jul 2025 10:00:00 +0530</pubDate><guid>https://csetutorials.com/spark-core-concepts-and-execution-flow.html.html</guid><description>&lt;p>Apache Spark is a computing system used for processing very large amounts of data quickly by distributing the work across a cluster of many computers.&lt;/p>
&lt;h2 id="1-fundamental-concepts">1. Fundamental Concepts&lt;/h2>
&lt;h3 id="the-distributed-dataset-and-partitions">The Distributed Dataset and Partitions&lt;/h3>
&lt;p>Spark is designed to process datasets that are too large for one machine. To do this, it must divide the large dataset into smaller chunks that can be processed in parallel. Each of these chunks is called a Partition.&lt;/p></description></item><item><title>Understanding NiFi and Airflow in Simple Terms: How They Help with Data Engineering and Data Flow</title><link>https://csetutorials.com/nifi-vs-airflow-real-time-vs-batch.html</link><pubDate>Wed, 16 Oct 2024 06:40:58 +0530</pubDate><guid>https://csetutorials.com/nifi-vs-airflow-real-time-vs-batch.html</guid><description>&lt;p>In the world of data, things can get pretty complex. Companies have tons of data flowing in from different sources like websites, sensors, apps, or databases and they need ways to handle and process all of this information. Two tools that help manage this data are &lt;strong>Apache NiFi&lt;/strong> and &lt;strong>Apache Airflow&lt;/strong>. They do different jobs, but both are very important when it comes to making sure data is handled properly. Letâ€™s break it down in simple terms.&lt;/p></description></item><item><title>Scala 3 Basics</title><link>https://csetutorials.com/scala-3-basics.html</link><pubDate>Tue, 13 Sep 2022 09:38:50 +0530</pubDate><guid>https://csetutorials.com/scala-3-basics.html</guid><description>&lt;h2 id="scala-basics">Scala Basics&lt;/h2>
&lt;h3 id="how-to-declare-a-variable">How to declare a variable&lt;/h3>
&lt;h4 id="declare-a-constant-variable">Declare a constant variable&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> x&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Int&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> x &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>types are optional&lt;/li>
&lt;li>val cannot be reassigned, val are constant/immutable&lt;/li>
&lt;li>Semicolon are not necessary&lt;/li>
&lt;/ul>
&lt;h4 id="declare-a-variable">Declare a variable&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> x&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Int&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> x &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="expressions--instructions">Expressions &amp;amp; Instructions&lt;/h4>
&lt;ul>
&lt;li>Changing a variable is called as side effects&lt;/li>
&lt;li>Instructions are doing something.&lt;/li>
&lt;li>Expression is something that has a value.&lt;/li>
&lt;li>Donot write loops in Scala. Everything in Scala is an expression.&lt;/li>
&lt;li>There is a special data type in Scala that is &lt;code>Unit&lt;/code>. Unit is something like inline function. eg &lt;code>val x = while(i&amp;lt;10){println(i);i++}&lt;/code>&lt;/li>
&lt;li>Instructions are executed (Java). Expressions are evaluated (Scala).&lt;/li>
&lt;/ul>
&lt;h4 id="code-blocks">Code Blocks&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> codeBlock &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> z &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> w &lt;span style="color:#66d9ef">=&lt;/span> z &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>w &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;goodbye&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Code block is an expression.&lt;/li>
&lt;li>The value of the whole block is the value of its last expression.&lt;/li>
&lt;/ul>
&lt;h3 id="functions">Functions&lt;/h3>
&lt;h4 id="how--to-define-functions">How to define functions&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> aFunction&lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> b&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> aFunction1&lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> b&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> aFunction2&lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> b&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>b &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> aFunction2&lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#f92672">,&lt;/span> b &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>An expression or a code block.&lt;/li>
&lt;li>Parameterless functions can be called just by their names (ie. without using parenthesis ())&lt;/li>
&lt;li>In Scala when you need loops, use recursions. This is a fundamental idea of functional programming.&lt;/li>
&lt;li>The compiler can infer the return type of a function, but we cannot figure out the return type of a recursive function. As best practice always specify the return type.&lt;/li>
&lt;li>You can also return Unit.&lt;/li>
&lt;/ul>
&lt;h4 id="interpolators">Interpolators&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> play&lt;span style="color:#f92672">(&lt;/span>name&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> age&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span> println&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">s&amp;#34;Hi my name is &lt;/span>&lt;span style="color:#e6db74">$name&lt;/span>&lt;span style="color:#e6db74"> and my age is &lt;/span>&lt;span style="color:#e6db74">$age&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> main&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Array&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">])&lt;/span>&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Unit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	play&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Ashish&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="tail-recursion-tailrec">Tail Recursion (@tailrec)&lt;/h4>
&lt;p>Write recursion in the last expression. The idea used by compilers to optimize tail-recursive functions is simple, since the recursive call is the last statement, there is nothing left to do in the current function, so saving the current functionâ€™s stack frame is of no use.&lt;/p></description></item><item><title>How to setup Single Node Hive on Tez Hadoop Cluster</title><link>https://csetutorials.com/setup-hadoop-2-hive-mysql-tez.html</link><pubDate>Tue, 28 Apr 2020 08:11:36 +0530</pubDate><guid>https://csetutorials.com/setup-hadoop-2-hive-mysql-tez.html</guid><description>&lt;p>In this tutorial I&amp;rsquo;m going to show you how setup single node Hadoop cluster with hive and tez. We are going to use the following versions -&lt;/p>
&lt;p>Hadoop - 2.7.2&lt;br>
Hive - 2.1.1&lt;br>
Tez - 0.9.2&lt;/p>
&lt;h2 id="preriquisites-">Preriquisites :&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Java 8 must be installed and set &lt;code>JAVA_HOME&lt;/code> path.&lt;/strong>
If you are using ubuntu then you can install java by using the below command&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install openjdk-8-jdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that you can set &lt;code>JAVA_HOME&lt;/code> path by adding the below line in &lt;code>.bashrc&lt;/code> file.&lt;/p></description></item></channel></rss>