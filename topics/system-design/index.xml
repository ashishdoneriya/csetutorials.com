<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Design on Cse Tutorials</title><link>https://csetutorials.com/topics/system-design/</link><description>Recent content in System Design on Cse Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 18 Dec 2024 20:10:04 +0530</lastBuildDate><atom:link href="https://csetutorials.com/topics/system-design/index.xml" rel="self" type="application/rss+xml"/><item><title>How WhatsApp Manages Real-Time Messaging at Scale: A Detailed Guide</title><link>https://csetutorials.com/whatsapp-real-time-messaging-scalability/</link><pubDate>Wed, 18 Dec 2024 20:10:04 +0530</pubDate><guid>https://csetutorials.com/whatsapp-real-time-messaging-scalability/</guid><description>WhatsApp, with billions of active users, manages an enormous volume of real-time messages daily while maintaining seamless performance, scalability, and end-to-end encryption. This article provides a comprehensive look into WhatsApp’s message delivery system, focusing on its architecture, handling of one-to-one and group chats, offline message storage, notification mechanisms, optimized database operations, and efficient user-to-server mapping.
WhatsApp Messaging Architecture: An Overview WhatsApp’s infrastructure relies on multiple components to deliver real-time communication:</description></item><item><title>Understanding Push Notifications in WhatsApp: Architecture, Flow, and Behavior</title><link>https://csetutorials.com/push-notifications-whatsapp-architecture-flow/</link><pubDate>Wed, 18 Dec 2024 18:35:38 +0530</pubDate><guid>https://csetutorials.com/push-notifications-whatsapp-architecture-flow/</guid><description>Understanding Push Notifications: Architecture and Flow Push notifications are a core feature in modern apps, enabling real-time communication with users. Whether it’s a messaging app like WhatsApp or a social media platform, the process involves multiple components working together seamlessly. Let’s break it down step by step.
Push Notification Architecture The architecture of push notifications is built around three key players:
Mobile App: The app installed on the user’s device that wants to notify the user about certain events.</description></item><item><title>Distributed Leaderboard System Design</title><link>https://csetutorials.com/distributed-leaderboard-system-design/</link><pubDate>Mon, 02 May 2022 07:21:55 +0530</pubDate><guid>https://csetutorials.com/distributed-leaderboard-system-design/</guid><description>Requirements 100 million requests per second Leaderboard should be updated as soon as possible Components of the system Key-Value database Webservers Load Balancers Cache Service Queues Data Flow Summary The user&amp;rsquo;s request to update score would go to the webservers. The webserver send the request to the queue. From queue, a set of workers fetch the individual request, fetch the user&amp;rsquo;s current score from the key-value db and adding the increment, updating the new score to the db then send the updated score to the batch queue (combining multiple user&amp;rsquo;s scores).</description></item><item><title>Web Crawler Design Techniques</title><link>https://csetutorials.com/web-crawler-design-techniques/</link><pubDate>Sat, 03 Apr 2021 10:37:44 +0530</pubDate><guid>https://csetutorials.com/web-crawler-design-techniques/</guid><description>A web crawler can be used in various services such as
Search Engines Archive Storage Piracy Detector Web Mining Lets talk about the data flow first. Lets say we have a set of url as a starting point. So first we fetch the content of those urls. After that we parse the content, check if it is duplicate or not. Then we extract urls and after filtering the urls we add those urls to the queue to again crawling.</description></item><item><title>URL Shortener System Design</title><link>https://csetutorials.com/url-shortener-system-design/</link><pubDate>Mon, 29 Mar 2021 10:36:23 +0530</pubDate><guid>https://csetutorials.com/url-shortener-system-design/</guid><description>Requirements 100 million writes per day ie. 100 million urls would be shortened per day. Only alphanumeric characters are allowed in the shortened URL. The system should be highly available, scalable and fault tolerance. Estimations Write operations : 100 million. It means 100000000/(24 * 3600) = 1158 writes per second. Read operations : Lets say the read operations are 10 times of write operations that is 11580 reads per second. Lets suppose the service would run for 10 years.</description></item><item><title>Unique ID generator in distributed systems</title><link>https://csetutorials.com/unique-id-generator-system-design/</link><pubDate>Thu, 25 Mar 2021 02:30:00 +0530</pubDate><guid>https://csetutorials.com/unique-id-generator-system-design/</guid><description>Key Points MySQL auto increment is not sufficient for distributed systems because it is not large enough &amp;amp; would be very challenging generating unique ids across multiple databases with minimal delay;
Our requirement is the ids should be unique, sortable, max 64 bit (8 bytes ie. could fit in long data type in Java).
Three ways using which we can generate UUID UUID is 128 bit. It has very low probability of collusion.</description></item><item><title>How to Design a Key Value Database</title><link>https://csetutorials.com/key-value-storage-design-architecture/</link><pubDate>Wed, 24 Mar 2021 09:29:42 +0530</pubDate><guid>https://csetutorials.com/key-value-storage-design-architecture/</guid><description>It is a non-relational database. The key must be unique, can be plain text or hashed values. The value can be directly fetched through the key.
Requirements The size of a key value pair is small ie. less than 10 KB. Big Data : It should be able to store very large amount of data. High Availability : The system should repond to queries even in case of failures. High Scalability : The system should be able to scale according to the data and the traffic.</description></item><item><title>Consistent Hashing Design and Techniques</title><link>https://csetutorials.com/consistent-hashing-design-techniques/</link><pubDate>Sun, 21 Mar 2021 07:09:36 +0530</pubDate><guid>https://csetutorials.com/consistent-hashing-design-techniques/</guid><description>Consistent Hashing is one of the very important concept in the field of system designing. Consistent hashing is used mainly in load balancers, key-value store etc.
Lets suppose You have to create a Load Balancer for your WebApp. I presume you know what is a load balancer.
One way is to distribute the load one by one on each server as the request comes. The problem in this approach is that if the server was storing some information in its cache or session then the cache or the session would become irrelevant if the same reqeust for that client goes to another server.</description></item><item><title>Rate Limiter Design Techniques with Scenarios and Solutions</title><link>https://csetutorials.com/rate-limiter-design-techniques/</link><pubDate>Wed, 17 Mar 2021 09:35:32 +0530</pubDate><guid>https://csetutorials.com/rate-limiter-design-techniques/</guid><description>Rate Limiting is a very vast topic. It depends on what type of rate limiter you want, what are your requirements. First lets assume there is a lot of traffic coming every second or minute. So we will do all the calculations according to the rate limiter.
NOTE : There should be minimal impact of rate limiter on apis latency.
How to limit the traffic? To put a control on traffic or a user who is sending a lot of requests, we have to put a middleware (rate limiter) between the internet traffic (ie.</description></item><item><title>SSTable Architecture Summary</title><link>https://csetutorials.com/sstable-architecture/</link><pubDate>Wed, 10 Mar 2021 10:38:50 +0530</pubDate><guid>https://csetutorials.com/sstable-architecture/</guid><description>Key Points SSTable or Sorted String Table is used to store key values. In SSTables, key-value pairs are written in sorted order in disk. For faster access to value of a key, indexes are maintained for SSTable. Lets call it SSIndex. We keep copy of SSIndex in RAM for faster access. There is a special property of SSTable that is they are immutable. It means we cannot append or delete data to SSTable so as to maintain sorting order and read speed.</description></item></channel></rss>